#ifndef INPUT_H
#define INPUT_H

#include <stddef.h>

/**
 * 判断字符串是否符合 lisp 语法
 * 注：
 *   对于字符串常量，使用双引号包围，并且不能跨行
 *   对于引号表达式，以单引号开始，一般后续接一个或多个字母或数字。另外，存在 '() 的形式，表空表。而且不能跨行
 *   对于符号（包含数值），可由字母、数字、下划线、!、%、.、+、-、*、/ 组成
 * 
 * @param: str --> 字符串首地址
 * @param: len --> 字符串长度
 * 
 * @return: -1 非法，0 合法且完整，1 不完整
 */
int is_legal(char *str, size_t len);

/**
 * 把字符串按照括号['(' or ')']切分，然后以表形式（序对）存储
 * 
 * 注：下面描述了 a、(a)、((a) b) 的序对表示形式。
 *    需要注意的是即使只有一个 a（一个基本元素）仍需要一个序对表示。
 *    也就是说此处用一个序对表示一个基本元素。
 *  +---+---+           +---+---+   +---+---+
 *  | a | / | --> a     |   |   +--->   | / |    --> ((a) b)
 *  +---+---+           +-+-+---+   +-+-+---+
 *                        |           |
 *  +---+---+           +-v-+---+   +-v-+---+
 *  |   | / | --> (a)   |   | / |   | b | / |
 *  +-+-+---+           +-+-+---+   +---+---+
 *    |                   |
 *  +-v-+---+           +-v-+---+
 *  | a | / |           | a | / |
 *  +---+---+           +---+---+
 * 
 * @param: str --> 字符串首地址
 * @param: len --> 字符串长度
 * 
 * @return: 表首地址
 *    若返回 0 则表示输入的是空字符串或输入的字符串中只有空白字符。
 *    此外输入 () or (  ) 等类似形式，则会得到空表。
 *    空表被表示为含两个指向 0 地址元素的序对，如此表示是因为要用一个序对表示一个基本元素。
 */
void *save_str_to_pair(char *str, size_t len);

#endif

